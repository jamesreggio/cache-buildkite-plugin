#!/bin/bash
# shellcheck disable=SC2001

set -euo pipefail

if [[ "${BUILDKITE_PLUGIN_CACHE_DEBUG:-false}" =~ (true|on|1) ]]; then
  set -x
fi

if [[ -n "${BUILDKITE_PLUGIN_CACHE_CACHE_KEY:-}" ]]; then
    AWS_ARGS=""

    if [[ -n "${BUILDKITE_PLUGIN_CACHE_S3_PROFILE:-}" ]]; then
      AWS_ARGS="--profile ${BUILDKITE_PLUGIN_CACHE_S3_PROFILE}"
    fi

    cache_key_prefix=$(echo "$BUILDKITE_PLUGIN_CACHE_CACHE_KEY" | sed -e 's/{.*//')
    template_value=$(echo "$BUILDKITE_PLUGIN_CACHE_CACHE_KEY" | sed -e 's/^[^\{{]*[^A-Za-z]*//' -e 's/.}}.*$//' | tr -d \' | tr -d \")

    if [[ $template_value == *"checksum"* ]]; then
      if [[ "$OSTYPE" == "linux-gnu" ]]; then
        function=${template_value/"checksum"/"sha1sum"}
      elif [[ "$OSTYPE" == "darwin"* ]]; then
        # fallback to shasum
        function=${template_value/"checksum"/"shasum"}
      # elif [[ "$OSTYPE" == "win32" ]]; then # for further usage
      else
        # fallback to sha1sum
        function=${template_value/"checksum"/"sha1sum"}
      fi
      result=$($function | awk '{print $1}')
      cache_key="$cache_key_prefix$result"
    else
      cache_key=$BUILDKITE_PLUGIN_CACHE_CACHE_KEY
    fi
    
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      rsync_args="--ignore-missing-args"
    else
      rsync_args=""
    fi

    if [[ -n "${BUILDKITE_PLUGIN_CACHE_RSYNC_STORAGE:-}" ]]; then
      mkdir -p "${BUILDKITE_PLUGIN_CACHE_RSYNC_STORAGE}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}/${cache_key}/"
      rsync -a $rsync_args "${BUILDKITE_PLUGIN_CACHE_RSYNC_STORAGE}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}/${cache_key}/" .
    elif [[ -n "${BUILDKITE_PLUGIN_CACHE_TARBALL_STORAGE:-}" ]]; then
      mkdir -p "${BUILDKITE_PLUGIN_CACHE_TARBALL_STORAGE}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
      TAR_FILE="${BUILDKITE_PLUGIN_CACHE_TARBALL_STORAGE}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}/${cache_key}.tar"
      if [ -f "$TAR_FILE" ]; then
        tar -xf "${TAR_FILE}" -C .
        rm "${TAR_FILE}"
      fi
    else
      echo ":aws: :amazon-s3: sync ${cache_key}"
      TAR_FILE="${cache_key}.tar"
      bucket="${BUILDKITE_PLUGIN_CACHE_S3_BUCKET_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
      aws s3api head-object --bucket "${BUILDKITE_PLUGIN_CACHE_S3_BUCKET_NAME}" --key "${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}/${TAR_FILE}" || no_head=true
      if ${no_head:-false}; then
        echo "~~~ Cache restore is skipped because s3://${bucket}/${TAR_FILE} does not exist"
      else
        aws s3 cp "s3://${bucket}/${TAR_FILE}" . $AWS_ARGS
        tar -xf "${TAR_FILE}" -C .
        rm "${TAR_FILE}"
      fi
    fi
else
  echo "~~~ Cache is skipped because no cache key provided"
  exit 0
fi
